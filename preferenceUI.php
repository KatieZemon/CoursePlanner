<?php  // Connects to the databasemysql_connect("127.0.0.1", "jakekra1_katie", "database238") or die(mysql_error()); mysql_select_db("jakekra1_katie") or die(mysql_error());  /**** Verify that you are logged in *****/ // Checks the cookie to be sure you are logged inif(isset($_COOKIE['courseplanner_user'])) {  $username = $_COOKIE['courseplanner_user'];   $pass = $_COOKIE['courseplanner_key'];   $check = mysql_query("SELECT * FROM Student WHERE username = '$username'")or die(mysql_error());   while($info = mysql_fetch_array( $check )) {    // If the cookie has the wrong password, you are taken to the login page     if ($pass != $info['password']) {      header("Location: index.php");     }   }}// If you are not logged in, you are redirected to the login screen else {			    header("Location: index.php"); }// check database for username$check = mysql_query("SELECT * FROM Student WHERE username='".strtolower($_COOKIE['courseplanner_user'])."';");// username was not found$check2 = mysql_num_rows($check);if ($check2 == 0) {  //header("Location: ./login.php?error=1"); die('That user does not exist in our database.');}$student = mysql_fetch_array( $check );//while($info = mysql_fetch_array( $check )) {//  $info['password'] = stripslashes($info['password']);//}   ?>    <html><head><title>Tab-View</title><script language="JavaScript">var prefID=0;var InstructorDataPrefUI = [];var SectionDataPrefUI = [];var LocationDataPrefUI = [];var AvailableDataPrefUI = [];var TimeslotDataPrefUI = [];var ExistingInstructorData = [];var ExistingSectionData = [];var ExistingLocationData = [];var ExistingAvailableData = [];var ExistingTimeslotData = [];var listOfPreferences = [];var timeInterval = 15;var timeSlotTable;var startSelect, endSelect;var monBox,tueBox,wedBox,thuBox,friBox;var selectedDays;var daysOfWeek = ['M', 'T', 'W', 'R', 'F'];function getXMLHttpPrefUI() {  var xmlHttp  try 	{    //Firefox, Opera 8.0+, Safari    xmlHttp = new XMLHttpRequest();  }  catch(e) 	{    //Internet Explorer    try 		{      xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");    }    catch(e) 		{      try 			{        xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");      }      catch(e) 			{        alert("Your browser does not support AJAX!")        return false;      }    }  }  return xmlHttp;}// Obtain a list of all sections in instructor table, and a list of instructors and courses in the course selected tablefunction getInstructorInfoPrefUI(){	var xmlHttpExisting = getXMLHttpPrefUI();	xmlHttpExisting.onreadystatechange = function() 	{    if(xmlHttpExisting.readyState == 4) 		{      HandleResponseParseExistingInstructors(xmlHttpExisting.responseText);    	var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{					HandleResponseGetInstructorInfoPrefUI(xmlHttp.responseText);				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=getInstructors&stuid=" + <?php echo($student['studentID']); ?>, true);			xmlHttp.send(null);		}  }  xmlHttpExisting.open("GET", "databaseFunctions.php?cmd=getExistingInstructorPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);	xmlHttpExisting.send(null);}function HandleResponseParseExistingInstructors(response){	ExistingInstructorData = [];	response = response.substring(0, response.length - 1);	ExistingInstructorData = response.split("~");		}function HandleResponseGetInstructorInfoPrefUI(response) {  // Morph the response into usuable data  response = response.substring(0, response.length-1);  var rtemp = response.split("~");  var InstructorsAvailPrefUI = [];	InstructorDataPrefUI = [];		for(i = 0; i < rtemp.length; i++)	{		InstructorsAvailPrefUI[i] = rtemp[i].split("#");	}		// Combine the server data into arrays based on a single instructor with multiple sections 	for(i=0; i < InstructorsAvailPrefUI.length; i++)	{				var xtemp = [];		var duplicate = false;		var location;		for(j=0;j<InstructorDataPrefUI.length;j++)		{						if((InstructorDataPrefUI[j][1] == InstructorsAvailPrefUI[i][2]) && (InstructorDataPrefUI[j][0] == InstructorsAvailPrefUI[i][0]))			{				duplicate=true;				location = j;			}		}		if(duplicate)		{			InstructorDataPrefUI[location].push(InstructorsAvailPrefUI[i][1]); // Add section to the existing list		}		else		{						xtemp.push(InstructorsAvailPrefUI[i][0]); // 0:class name			xtemp.push(InstructorsAvailPrefUI[i][2]); // 1:instructor name			xtemp.push(InstructorsAvailPrefUI[i][1]); // 2+:section id			InstructorDataPrefUI.push(xtemp);		}	}	// Display Instructor table		  var tbl = document.getElementById("InstructorTable");	var RowDeletion = tbl.rows.length;	for(RowDeletion; RowDeletion > 1; RowDeletion--){		tbl.deleteRow(RowDeletion);	}	for (j = 0; j < InstructorDataPrefUI.length; j++){		var rowCount = tbl.rows.length;		var row = tbl.insertRow(rowCount);		        // Course Names		var cell0 = row.insertCell(0);		cell0.rowSpan = 1;		cell0.innerHTML = '<center>' + InstructorDataPrefUI[j][0] + '</center>';		cell0.style.borderLeft = " thin solid"		cell0.style.borderBottom = "thin solid"				// Check Boxes		var cell1 = row.insertCell(1);		var chbox = document.createElement("input");		chbox.type = "checkbox";		chbox.id = "opt" + toString(j);		chbox.value = j;				// Update checkboxes 		for(i = 0; i < ExistingInstructorData.length; i++){			if(InstructorDataPrefUI[j][2] == ExistingInstructorData[i]){				chbox.checked = true;				break;			}		}				chbox.onchange = function(){InstructorTableInsDelPrefUI(this)};		cell1.align = "center";		cell1.appendChild(chbox);		cell1.style.borderLeft = "thin solid"		cell1.style.borderBottom = "thin solid"							// Instructor Name		var cell3 = row.insertCell(2);		cell3.innerHTML = '<center>' + InstructorDataPrefUI[j][1] + '</center>';		cell3.style.borderLeft = "thin solid"		cell3.style.borderBottom = "thin solid"		cell3.style.borderRight = " thin solid"	}			var currentLocation = 0;	for(j = 1; j < tbl.rows.length; j++)	{		if(tbl.rows[currentLocation].cells[0].innerHTML == tbl.rows[j].cells[0].innerHTML)		{			tbl.rows[currentLocation].cells[0].rowSpan = tbl.rows[currentLocation].cells[0].rowSpan + 1;			tbl.rows[j].deleteCell(0);		}		else		{			currentLocation = j;		}	}}function InstructorTableInsDelPrefUI(chbox){	if(chbox.checked)	{		for(i = 2; i < InstructorDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=addInstructorSection&cid=" + (prefID++) + "&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + InstructorDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);		}	}	else	{		for(i = 2; i < InstructorDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=delInstructorSection&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + InstructorDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);			}	}}function getSectionInfoPrefUI(){	// Gets the existing section preferences.	var xmlHttpExisting = getXMLHttpPrefUI();	xmlHttpExisting.onreadystatechange = function() 	{    if(xmlHttpExisting.readyState == 4) 		{      HandleResponseParseExistingSections(xmlHttpExisting.responseText);			// Gets the newly selected courses.			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{					HandleResponseGetSectionInfoPrefUI(xmlHttp.responseText);				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=getSectionsForPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);			xmlHttp.send(null);		}  }  xmlHttpExisting.open("GET", "databaseFunctions.php?cmd=getExistingSectionPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);	xmlHttpExisting.send(null);}function HandleResponseParseExistingSections(response){	ExistingSectionData = [];	response = response.substring(0, response.length - 1);	ExistingSectionData = response.split("~");}function HandleResponseGetSectionInfoPrefUI(response){	response = response.substring(0, response.length-1);  var rtemp = response.split("~");  var SectionsAvailPrefUI = [];	SectionDataPrefUI = [];		for(i = 0; i < rtemp.length; i++)	{		SectionsAvailPrefUI[i] = rtemp[i].split("#");	}		for(i=0; i < SectionsAvailPrefUI.length; i++)	{		var xtemp = [];		xtemp.push(SectionsAvailPrefUI[i][0]); // 0:class name		xtemp.push(SectionsAvailPrefUI[i][2]); // 1: letter		xtemp.push(SectionsAvailPrefUI[i][1]); // 2+:section id    xtemp.push(SectionsAvailPrefUI[i][3]); // 3:sTime    xtemp.push(SectionsAvailPrefUI[i][4]); // 4:eTime    xtemp.push(SectionsAvailPrefUI[i][5]); // 5:instructor		SectionDataPrefUI.push(xtemp);	}		// Delete existing rows in the table  var tbl = document.getElementById("SectionTable");	var RowDeletion = tbl.rows.length;	for(RowDeletion; RowDeletion > 1; RowDeletion--)	{		tbl.deleteRow(RowDeletion);	}		// Add the new rows to the table	for (j = 0; j < SectionDataPrefUI.length; j++)	{		var rowCount = tbl.rows.length;		var row = tbl.insertRow(rowCount);		var cell = row.insertCell(0);		cell.rowSpan = 1;		cell.innerHTML = SectionDataPrefUI[j][0]; // Course Name		var cell2 = row.insertCell(1);		var cell3 = row.insertCell(2);		cell3.innerHTML = '<center>'+SectionDataPrefUI[j][1]+'</center>'; // Letter		var chbox = document.createElement("input");		chbox.type = "checkbox";		chbox.id = "opt" + toString(j);		chbox.value = j;        var startTime = getDisplayTimeUI(SectionDataPrefUI[j][3]);    var endTime = getDisplayTimeUI(SectionDataPrefUI[j][4]);        var cell4 =  row.insertCell(3);    cell4.innerHTML = '<center>' +startTime + " - " + endTime + '</center>';        var cell5 = row.insertCell(4)    cell5.innerHTML = SectionDataPrefUI[j][5];		// This small loop evaluates the existing preferences in the table and adjusts the options accordingly.		for(i = 0; i < ExistingSectionData.length; i++)		{			if(SectionDataPrefUI[j][2] == ExistingSectionData[i])			{				chbox.checked = true;				break;			}		}		chbox.onchange = function(){SectionTableInsDelPrefUI(this)};		cell2.align = "center";		cell2.appendChild(chbox);  }	// Modify the course name cells to span multiple rows instead repeating the name.	var currentLocation = 0;	for(j = 1; j < tbl.rows.length; j++)	{		if(tbl.rows[currentLocation].cells[0].innerHTML == tbl.rows[j].cells[0].innerHTML)		{			tbl.rows[currentLocation].cells[0].rowSpan = tbl.rows[currentLocation].cells[0].rowSpan + 1;			tbl.rows[j].deleteCell(0);		}		else		{			currentLocation = j;		}	}}function SectionTableInsDelPrefUI(chbox){	if(chbox.checked)	{		var xmlHttp = getXMLHttpPrefUI();		xmlHttp.onreadystatechange = function() 		{			if(xmlHttp.readyState == 4) 			{			}		}		xmlHttp.open("GET", "databaseFunctions.php?cmd=addSectionPreference&cid=" + (prefID++) + "&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + SectionDataPrefUI[chbox.value][2], true);		xmlHttp.send(null);	}	else	{		var xmlHttp = getXMLHttpPrefUI();		xmlHttp.onreadystatechange = function() 		{			if(xmlHttp.readyState == 4) 			{			}		}		xmlHttp.open("GET", "databaseFunctions.php?cmd=delSectionPreference&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + SectionDataPrefUI[chbox.value][2], true);		xmlHttp.send(null);		}}	function getLocationInfoPrefUI(){	var xmlHttpExisting = getXMLHttpPrefUI();	xmlHttpExisting.onreadystatechange = function() 	{    if(xmlHttpExisting.readyState == 4) 		{      			HandleResponseParseExistingLocations(xmlHttpExisting.responseText);			// Gets the newly selected courses.			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{					HandleResponseGetLocationInfoPrefUI(xmlHttp.responseText);				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=getLocationForPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);			xmlHttp.send(null);    }  }  xmlHttpExisting.open("GET", "databaseFunctions.php?cmd=getExistingLocationPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);	xmlHttpExisting.send(null);}function HandleResponseParseExistingLocations(response){		ExistingLocationData = [];		response = response.substring(0, response.length - 1);		ExistingLocationData = response.split("~");}function HandleResponseGetLocationInfoPrefUI(response){	// Morph the response into usuable data.	response = response.substring(0, response.length-1);  var rtemp = response.split("~");  var LocationsAvailPrefUI = [];	LocationDataPrefUI = [];		for(i = 0; i < rtemp.length; i++)	{		LocationsAvailPrefUI[i] = rtemp[i].split("#");	}	// Next, combine the server data into arrays based on a single location	// with multiple sections 	for(i=0; i < LocationsAvailPrefUI.length; i++)	{				var xtemp = [];		var duplicate = false;		var location;		for(j=0;j<LocationDataPrefUI.length;j++)		{			// Check for same location and class			if((LocationDataPrefUI[j][1] == LocationsAvailPrefUI[i][1]) && (LocationDataPrefUI[j][0] == LocationsAvailPrefUI[i][0]))			{				duplicate=true;				location = j;			}		}		if(duplicate)		{			LocationDataPrefUI[location].push(LocationsAvailPrefUI[i][2]); // Add section to the existing list		}		else		{					  xtemp.push(LocationsAvailPrefUI[i][0]); // 0:class name			xtemp.push(LocationsAvailPrefUI[i][1]); // 1:location			xtemp.push(LocationsAvailPrefUI[i][2]); // 2+:section id			LocationDataPrefUI.push(xtemp);		}	}		// Transfer the organized data into the html table. Remove any previous entries.  var tbl = document.getElementById("LocationTable");	var RowDeletion = tbl.rows.length;	for(RowDeletion; RowDeletion > 1; RowDeletion--)	{		tbl.deleteRow(RowDeletion);	}			for (j = 0; j < LocationDataPrefUI.length; j++)	{		var rowCount = tbl.rows.length;		var row = tbl.insertRow(rowCount);		var cell0 = row.insertCell(0);		cell0.rowSpan = 1;		cell0.innerHTML = '<center>'+LocationDataPrefUI[j][0]+'</center>';			var cell2 = row.insertCell(1);				var cell3 = row.insertCell(2);		cell3.innerHTML = '<center>'+LocationDataPrefUI[j][1]+'</center>';		var chbox = document.createElement("input");		chbox.type = "checkbox";		chbox.id = "opt" + toString(j);		chbox.value = j;		// This small loop evaluates the existing preferences in the table and adjusts the options accordingly.		for(i = 0; i < ExistingLocationData.length; i++)		{			if(LocationDataPrefUI[j][2] == ExistingLocationData[i])			{				chbox.checked = true;				break;			}		}		chbox.onchange = function(){LocationTableInsDelPrefUI(this)};		cell2.align = "center";		cell2.appendChild(chbox);  }		// Generic functionality to expand the course ID over consecutive table rows	var currentLocation = 0;	for(j = 1; j < tbl.rows.length; j++)	{		if(tbl.rows[currentLocation].cells[0].innerHTML == tbl.rows[j].cells[0].innerHTML)		{			tbl.rows[currentLocation].cells[0].rowSpan = tbl.rows[currentLocation].cells[0].rowSpan + 1;			tbl.rows[j].deleteCell(0);		}		else		{			currentLocation = j;		}	}}function LocationTableInsDelPrefUI(chbox){	if(chbox.checked)	{		for(i=2; i < LocationDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=addLocationPreference&cid=" + (prefID++) + "&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + LocationDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);		}	}	else	{		for(i=2; i < LocationDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=delLocationPreference&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + LocationDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);			}	}}function getAvailableInfoPrefUI(){	// Gets the existing instructor preferences.	var xmlHttpExisting = getXMLHttpPrefUI();	xmlHttpExisting.onreadystatechange = function() 	{    if(xmlHttpExisting.readyState == 4) 		{      HandleResponseParseExistingAvailable(xmlHttpExisting.responseText);    	var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{					HandleResponseGetAvailableInfoPrefUI(xmlHttp.responseText);				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=getAvailableForPreferences&stuid=" + <?php echo($student['studentID']); ?>, true);			xmlHttp.send(null);		}  }  xmlHttpExisting.open("GET", "databaseFunctions.php?cmd=getExistingAvailablePreferences&stuid=" + <?php echo($student['studentID']); ?>, true);	xmlHttpExisting.send(null);	// Gets the newly selected courses.}function HandleResponseParseExistingAvailable(response){		ExistingAvailableData = [];		response = response.substring(0, response.length - 1);		ExistingAvailableData = response.split("~");}function HandleResponseGetAvailableInfoPrefUI(response){	// Morph the response into usuable data.	response = response.substring(0, response.length-1);  var rtemp = response.split("~");  var AvailableAvailPrefUI = [];	AvailableDataPrefUI = [];	for(i = 0; i < rtemp.length; i++)	{		AvailableAvailPrefUI.push(rtemp[i].split("#"));	}	// Next, combine the server data into arrays based on a single location	// with multiple sections 	for(i=0; i < AvailableAvailPrefUI.length; i++)	{				var xtemp = [];		var duplicate = false;		var location;		for(j=0;j<AvailableDataPrefUI.length;j++)		{			// Check for same location and class			if((AvailableDataPrefUI[j][1] == AvailableAvailPrefUI[i][1]) && (AvailableDataPrefUI[j][0] == AvailableAvailPrefUI[i][0]))			{				duplicate=true;				location = j;			}		}		if(duplicate)		{			AvailableDataPrefUI[location].push(AvailableAvailPrefUI[i][2]); // Add section to the existing list		}		else		{						xtemp.push(AvailableAvailPrefUI[i][0]); // 0:class name			xtemp.push(AvailableAvailPrefUI[i][1]); // 1:status			xtemp.push(AvailableAvailPrefUI[i][2]); // 2+:section id			AvailableDataPrefUI.push(xtemp);		}	}		// Transfer the organized data into the html table. Remove any previous entries.  var tbl = document.getElementById("AvailableTable");	var RowDeletion = tbl.rows.length;	for(RowDeletion; RowDeletion > 1; RowDeletion--)	{		tbl.deleteRow(RowDeletion);	}			for (j = 0; j < AvailableDataPrefUI.length; j++)	{		if( AvailableDataPrefUI[j][1] == "U")		{			for(i=2; i < AvailableDataPrefUI[j].length; i++)			{				var xmlHttp = getXMLHttpPrefUI();				xmlHttp.onreadystatechange = function() 				{					if(xmlHttp.readyState == 4) 					{					}				}				xmlHttp.open("GET", "databaseFunctions.php?cmd=addAvailablePreference&cid=" + (prefID++) + "&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + AvailableDataPrefUI[j][i], true);				xmlHttp.send(null);				}		}		else		{			var rowCount = tbl.rows.length;			var row = tbl.insertRow(rowCount);			var cell = row.insertCell(0);			cell.rowSpan = 1;			cell.innerHTML = AvailableDataPrefUI[j][0];			var cell2 = row.insertCell(1);			var cell3 = row.insertCell(2);			cell2.align = "center";			if(AvailableDataPrefUI[j][1] == "W")			{				var chbox = document.createElement("input");				chbox.type = "checkbox";				chbox.id = "opt" + toString(j);				chbox.value = j;				// This small loop evaluates the existing preferences in the table and adjusts the options accordingly.				for(i = 0; i < ExistingAvailableData.length; i++)				{					if(AvailableDataPrefUI[j][2] == ExistingAvailableData[i])					{						chbox.checked = true;						break;					}				}				chbox.onchange = function(){AvailableTableInsDelPrefUI(this)};				cell2.appendChild(chbox);				cell3.innerHTML = "WaitListed";			}			else			{				cell2.innerHTML = "N/A";				cell3.innerHTML = "Available";			}					}  }		// Generic functionality to expand the course ID over consecutive table rows	var currentLocation = 0;	for(j = 1; j < tbl.rows.length; j++)	{		if(tbl.rows[currentLocation].cells[0].innerHTML == tbl.rows[j].cells[0].innerHTML)		{			tbl.rows[currentLocation].cells[0].rowSpan = tbl.rows[currentLocation].cells[0].rowSpan + 1;			tbl.rows[j].deleteCell(0);		}		else		{			currentLocation = j;		}	}}function AvailableTableInsDelPrefUI(chbox){	if(chbox.checked)	{		for(i=2; i < AvailableDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=addAvailablePreference&cid=" + (prefID++) + "&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + AvailableDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);		}	}	else	{		for(i=2; i < AvailableDataPrefUI[chbox.value].length; i++)		{			var xmlHttp = getXMLHttpPrefUI();			xmlHttp.onreadystatechange = function() 			{				if(xmlHttp.readyState == 4) 				{				}			}			xmlHttp.open("GET", "databaseFunctions.php?cmd=delAvailablePreference&stuid=" + <?php echo($student['studentID']); ?> + "&secID=" + AvailableDataPrefUI[chbox.value][i], true);			xmlHttp.send(null);			}	}}function insertDay(){	selectedDays = "";	if(document.preferences.mon.checked == true) {		selectedDays = selectedDays + "M ";		document.getElementById('newTimeFrameButton').disabled = false;    }	if(document.preferences.tue.checked == true) {		selectedDays = selectedDays + "T ";		document.getElementById('newTimeFrameButton').disabled = false;	}	if(document.preferences.wed.checked == true){		selectedDays = selectedDays + "W ";		document.getElementById('newTimeFrameButton').disabled = false;	}	if(document.preferences.thu.checked == true) {		selectedDays = selectedDays + "R ";		document.getElementById('newTimeFrameButton').disabled = false;	}	if(document.preferences.fri.checked == true) {		selectedDays = selectedDays + "F";		document.getElementById('newTimeFrameButton').disabled = false;	}	if (selectedDays == "") {	  document.getElementById('newTimeFrameButton').disabled = true;	}}</script><script type="text/javascript">function tabview_aux(TabViewId, id){  var TabView = document.getElementById(TabViewId);  var Tabs = TabView.firstChild;  while (Tabs.className != "Tabs" ) Tabs = Tabs.nextSibling;  var Tab = Tabs.firstChild;  var i   = 0;  do  {    if (Tab.tagName == "A")    {      i++;      Tab.href      = "javascript:tabview_switch('"+TabViewId+"', "+i+");";      Tab.className = (i == id) ? "Active" : "";      Tab.blur();    }  }  while (Tab = Tab.nextSibling);  var Pages = TabView.firstChild;  while (Pages.className != 'Pages') Pages = Pages.nextSibling;  var Page = Pages.firstChild;  var i    = 0;  do  {    if (Page.className == 'Page')    {      i++;      if (Pages.offsetHeight) Page.style.height = (Pages.offsetHeight-2)+"px";      Page.style.overflow = "auto";      Page.style.display  = (i == id) ? 'block' : 'none';    }  }  while (Page = Page.nextSibling);}function tabview_switch(TabViewId, id) { tabview_aux(TabViewId, id); }function tabview_initialize(TabViewId) { tabview_aux(TabViewId,  1); }// Adds a new row into the Time Preferencefunction getTimeslotInfoPrefUI(){  createTimeslotTable();  populateSelectedPrefs();}function populateSelectedPrefs() {<?PHP  $preferenceList = "SELECT *                FROM Timeslot                WHERE studentID='".$student['studentID']."'";  $result = mysql_query($preferenceList) or die(mysql_error());    //Print out result  while($row = mysql_fetch_array($result)){    //echo($row['dept']. " " . $row['num'] . "," );	echo("  addTimeSlotRow(".$row['startTime'].", ". $row['endTime'].", stripPercentSigns(\"".$row['day']."\"));\n");  }  ?>}function stripPercentSigns(text) {  text = text.replace(/%%%%/gi, ' ');  text = text.replace(/%%%/gi, ' ');  text = text.replace(/%%/gi, ' ');  text = text.replace(/%/gi, ' ');  return text;}function createTimeslotTable(){timeSlotTable = document.getElementById("timeSlotTable")var numRows = timeSlotTable.rows.lengthvar newRow = timeSlotTable.insertRow(numRows) // Insert Row at bottom  // Cell0 on left is empty  var cell0 = newRow.insertCell(0);  cell0.innerHTML = '\u00a0';  cell0.id = "timeBottomCell";  // Cell1 with startTimeSelector   var cell1 = newRow.insertCell(1);  cell1.style.borderTop = "thin solid"  cell1.style.borderLeft = "thin solid"  cell1.style.borderBottom = "thin solid"  startSelect = document.createElement("select");  startSelect.name = "StartTimeSelector";  startSelect.setAttribute("id", "startTimeMenu");  cell1.appendChild(startSelect);  	// Populate Start Time		for( i = 800; i <= 1845; i += timeInterval){	  if (Math.floor(i)%100 == 60) { i += 40 }	  var optn = document.createElement("OPTION");	  startSelect.options.add(optn);	  optn.text = getDisplayTimeUI(i);	  optn.value = i;	  optn.style.fontSize = "16px";	}	  // Cell2 with endTimeSelector   var cell2 = newRow.insertCell(2);  cell2.style.borderTop = "thin solid"  cell2.style.borderLeft = "thin solid"  cell2.style.borderBottom = "thin solid"  cell2.style.fontSize = "16px"  endSelect = document.createElement("select");  endSelect.name = "EndTimeSelector";    limitEndTimeSelectorPrefUI(0);  startSelect.onchange = updateSelect;  cell2.appendChild(endSelect);    //startSelect.onchange = limitEndTimeSelectorPrefUI;    // Cell 3 DAYS  var cell3 = newRow.insertCell(3);  var day1 = document.createTextNode("\u00a0 M");  var day2 = document.createTextNode("\u00a0 \u00a0 T");  var day3 = document.createTextNode("\u00a0 \u00a0 W");  var day4 = document.createTextNode("\u00a0 \u00a0 R");  var day5 = document.createTextNode("\u00a0 \u00a0 F");    cell3.style.borderTop = "thin solid";  cell3.style.borderLeft = "thin solid";  cell3.style.borderRight = "thin solid";  cell3.style.borderBottom = "thin solid";  cell3.style.fontSize = "16px";    monBox = document.createElement("input");  monBox.type = "checkbox";  monBox.id="monBox";  monBox.name = "mon";  monBox.onchange = insertDay;  cell3.appendChild(day1);  cell3.appendChild(monBox);    tueBox = document.createElement("input");  tueBox.type = "checkbox";  tueBox.id="tueBox";  tueBox.name = "tue";  tueBox.onchange = insertDay;  cell3.appendChild(day2);  cell3.appendChild(tueBox);    wedBox = document.createElement("input");  wedBox.type = "checkbox";  wedBox.id="wedBox";  wedBox.name = "wed";  wedBox.onchange = insertDay;  cell3.appendChild(day3);  cell3.appendChild(wedBox);    thuBox = document.createElement("input");  thuBox.type = "checkbox";  thuBox.id="thuBox";  thuBox.onchange = insertDay;  thuBox.name = "thu";  cell3.appendChild(day4);  cell3.appendChild(thuBox);    friBox = document.createElement("input");  friBox.type = "checkbox";  friBox.id="friBox";  friBox.name = "fri";  friBox.onchange = insertDay;  cell3.appendChild(day5);  cell3.appendChild(friBox);   document.getElementById('newTimeFrameButton').disabled = true;}function updateSelect() {  //alert("Hello");  limitEndTimeSelectorPrefUI(startSelect.selectedIndex);}// Populate the End Time Dropdown Menufunction limitEndTimeSelectorPrefUI(index){	// Get StartValue for End Time	var startValue = Math.floor(startSelect.options[index].value);	startValue = (startValue + timeInterval) % 100 == 60 ? (startValue + (100 - (startValue%100))) : (startValue + timeInterval);	//alert(startValue)	// Populate End Time//endSelect.options = [];	endSelect.setAttribute("width", 300);endSelect.setAttribute("height", 300);endSelect.options.length = 0;	for( i = startValue; i <= 1900; i += timeInterval){	  if (Math.floor(i)%100 == 60) { i += 40 }	  var optn = document.createElement("OPTION");	  endSelect.options.add(optn);	  optn.text = getDisplayTimeUI(i);	  optn.value = i;	  //optn.setAttribute("value", getDisplayTimeUI(i));	  optn.style.fontSize = "16px";	}	}	// Add a new time framefunction addTimeSlotRow(dstime, detime, ddays) {   // Error Catch: In case button was not disabled  if (ddays == undefined && selectedDays == "") {    alert('Error: It seems that no days have been selected.');	return;  }    timeSlotTable = document.getElementById("timeSlotTable")var numRows = timeSlotTable.rows.lengthvar newRow = timeSlotTable.insertRow(numRows-1) // Insert Row near bottomvar startIndex = startSelect.selectedIndexvar endIndex = endSelect.selectedIndex // Add Top border of empty cell  if (timeSlotTable.rows.length == 3){    document.getElementById("timeBottomCell").style.borderTop = "thin solid"  }    // Button  var newCell = newRow.insertCell(0);  newCell.innerHTML = '<center><a href="#"><img src="./bluebtn1.png" onMouseOver="this.src=\'./bluebtn2.png\'" onMouseOut="this.src=\'./bluebtn1.png\'" onMouseDown="verifyRemoveTimeslot(this.parentNode.parentNode.parentNode.parentNode.rowIndex, getElementById(\'timeSlotTable\')) "></a></center>';  newCell.style.borderTop = "thin solid"  newCell.style.borderLeft = "thin solid"    // Start Time   newCell = newRow.insertCell(1)   newCell.innerHTML = "<center>" + (dstime != undefined ? getDisplayTimeUI(dstime) : getDisplayTimeUI(startSelect.options[startIndex].value)) + "</center>" ;   newCell.style.borderLeft = "thin solid"   newCell.style.borderTop = "thin solid"        // End Time   newCell = newRow.insertCell(2)   newCell.innerHTML = "<center>" + (detime != undefined ? getDisplayTimeUI(detime) : getDisplayTimeUI(endSelect.options[endIndex].value)) + "</center>" ;   newCell.style.borderLeft = "thin solid"   newCell.style.borderTop = "thin solid"      // Days   newCell = newRow.insertCell(3)   newCell.innerHTML = "<center>" + (ddays != undefined ? ddays : selectedDays) + "</center>" ;   newCell.style.borderLeft = "thin solid"   newCell.style.borderRight = "thin solid"   newCell.style.borderTop = "thin solid"      // Scroll to bottom of window  var divblock = document.getElementById("timeDiv");  divblock.scrollTop = divblock.scrollHeight;      // Add new row to timeSlot table in the database  // Giving it sID, startTime, endTime, and Days  if (dstime == undefined && detime == undefined && ddays === undefined) {    listOfPreferences.push([startSelect.options[startIndex].value, endSelect.options[endIndex].value, addPercentages(selectedDays)]);    insertTimeSlot(<?php echo($student['studentID']); ?>, startSelect.options[startIndex].value, endSelect.options[endIndex].value, selectedDays);  }else {    listOfPreferences.push([dstime, detime, addPercentages(ddays)]);  }    // Uncheck all boxes, disable button, and reset number of days  document.preferences.mon.checked = false;  document.preferences.tue.checked = false;  document.preferences.wed.checked = false;  document.preferences.thu.checked = false;  document.preferences.fri.checked = false;  selectedDays = "";  document.getElementById('newTimeFrameButton').disabled = true;}// INSERT into timeSlotfunction insertTimeSlot(stuid, startTime, endTime, days) {  var xmlHttp = getXMLHttp();  var sendDays = addPercentages(days);    xmlHttp.onreadystatechange = function() {    if(xmlHttp.readyState == 4) {      HandleResponseInsertTimeSlot(xmlHttp.responseText);    }  }  // NOTICE cmd=add to signify that we're adding  xmlHttp.open("GET", "databaseFunctions.php?cmd=addNewTimeSlot&stuid=" + stuid + "&startTime=" + startTime+ "&endTime=" + endTime+ "&days=" + sendDays, true);  xmlHttp.send(null);}function addPercentages(text) {  var tempdays = text.replace(/ /gi, "");  var sendDays = "";  var j = 0;    for (var i = 0; i < daysOfWeek.length; i ++) {    if ((daysOfWeek[i] != tempdays.charAt(j)) ) {	sendDays += "%";	}else {	  sendDays += daysOfWeek[i];	  j ++;	}  }    return sendDays;}function HandleResponseInsertTimeSlot(){}function verifyRemoveTimeslot(index, form){var removetimeslot = confirm("Are you sure you want to remove the " + getDisplayTimeUI(listOfPreferences[index-1][0]) + " - " + getDisplayTimeUI(listOfPreferences[index-1][1]) + " time frame? ");//form.deleteRow(index); // if (removetimeslot)     removeTimeslotFromDB(<?php echo($student['studentID']); ?>, index, form);  }// INSERT into CourseSelectedfunction removeTimeslotFromDB(stuid, index, form) {  var xmlHttp = getXMLHttp();   xmlHttp.onreadystatechange = function() {    if(xmlHttp.readyState == 4) {      HandleRemoveTSResponse(xmlHttp.responseText, index, form);    }  }  // NOTICE cmd=add to signify that we're adding  xmlHttp.open("GET", "databaseFunctions.php?cmd=removeTimeSlot&stuid=" + stuid + "&startTime=" + listOfPreferences[index-1][0] + "&endTime=" + listOfPreferences[index-1][1] + "&days=" + listOfPreferences[index-1][2], true);  xmlHttp.send(null);}function HandleRemoveTSResponse(response, index, form) {//alert("test " + listOfPreferences[index-1]);  listOfPreferences.splice(index-1, 1);   // Remove Border on empty cell   if(listOfPreferences.length == 0){     document.getElementById("timeBottomCell").style.borderTop="none";   }  form.deleteRow(index);}function chkNumberPrefUI(){	if(isNaN(document.preferences.startTime.value))	{		alert('Please input a number only for the start time.');		return false;	}	if(isNaN(document.preferences.endTime.value))	{		alert('Please input a number only for the end time.');		return false;	}}function getDisplayTimeUI(time) {  dayTypes = ['AM', 'PM'];  var hour = Math.floor(time / 100) % 12;  hour = !hour ? 12:hour;  var min = time % 100 + dayTypes[Math.floor(time / 1200)];  if (time % 100 == 0) {    min = "00" + dayTypes[Math.floor(time / 1200)];  }  return hour + ':' + min;}	</script><style type="text/css">div.TabView div.Tabs{    height: 25px;    overflow: hidden;}div.TabView div.Tabs a{    float: left;    display: block;    width:  120px;    text-align: center;    height: 25px;    padding-top: 3px;    vertical-align: middle;    border: 1px solid black;    border-bottom-width: 0;    text-decoration: none;    font-family: "Arial", Serif;    font-weight: 600;    font-size: 18px;    color: #000080;}div.TabView div.Tabs a:hover, div.TabView div.Tabs a.Active{    background-color: lightblue;}div.TabView div.Pages{    clear: both;    border: 3px solid #404040;    overflow: hidden;}div.TabView div.Pages div.Page{    height: 100%;    padding: 0px;    overflow: hidden;}div.TabView div.Pages div.Page div.Pad{    padding: 3px 5px;}</style></head><!-- body onload = initTime() --><body><center><!--margin:0 420;--><font size = "4"> Select Preferences (Optional)</font> </center><form name="preferences" action="tabview.html" method="get">  <div class="TabView" id="TabView"style="width: 701px;margin:0 0;">    <div class="Tabs" style="width: 701px;margin:0 45;"> 			<a>Time</a> 			<a onclick="getInstructorInfoPrefUI()">Instructor</a> 			<a onclick="getLocationInfoPrefUI()">Location</a> 			<a onclick="getSectionInfoPrefUI()">Section</a> 			<a onclick="getAvailableInfoPrefUI()">Availability</a> 		</div>					    <div class="Pages" style="width: 607px; height: 450px;margin:auto;">		<!-- Time Page -->      <div class="Page" id = "timeDiv">        <div class="Pad" >          <font size = "4"><center>Schedule your desired breaks during the week. <br> 			  Select the times and days in which you do not want to have class.</font><br><br>                        <table id = "timeSlotTable" width = "520" cellspacing="0" cellpadding = "2" >            <tr>			<td></td>			<td><center>Start Time</center></td>			<td><center>End Time</center></td>			<td><center>Days</center></td>             </tr>			 </table>			 <br>			 <!-- Add Time Frame Button --><center><button type="button" id="newTimeFrameButton" style="height: 40px; width: 300px; " onclick="addTimeSlotRow();"><font size = "4">Add New Time Frame</button></font>			 <br><br><br><br>        </div>      </div>	  	  	  	         <!-- Instructor -->			<div class="Page">				<div class="Pad">					<font size = "4" id="InstructorTitle"><center> Select unwanted instructors </center></font>					<br>					<center>							<table name="InstructorTable" id="InstructorTable" border="0" cellspacing="0" cellpadding = "2">							<tr>								<td style="border-top:thin solid;border-left:thin  solid;border-bottom:thin solid;"><center>Course</center></td>								<td style="border-top:thin solid;border-left:thin solid;border-bottom:thin solid;"><center>Remove/Add</td>								<td style="border-top:thin solid;border-left:thin solid;border-bottom: thin solid;border-right:thin solid"><center>Instructor Teaching</td>							</tr>						</table>					</center>				</div>			</div>                 <!-- Location -->      <div class="Page">        <div class="Pad">					<font size = "4" id="LocationTitle"><center> Select unwanted course locations </center></font>					<br>					<center>						<table name="LocationTable" id="LocationTable" border="1">							<tr>								<td><center>Course</center></td>								<td><center>Remove/Add</center></td>								<td><center>Building and Room</center></td>							</tr>						</table>					</center>				</div>      </div>            <!-- Section -->			<div class="Page">				<div class="Pad">					<font size = "4" id="SectionTitle"><center> Select unwanted course sections </center></font>					<br>					<center>						<table name="SectionTable" id="SectionTable" border="1">							<tr>								<td><center>Course</center></td>								<td><center>Remove/Add</center></td>								<td><center>Sections Offered</center></td>                <td><center>Time</center></td>                <td><center>Instructor</center></td>							</tr>						</table>					</center>				</div>			</div>        <!-- Availability -->      <div class="Page">        <div class="Pad">					<font size = "4"><center> Choose whether to exclude waitlisted<br> courses from the generated list of schedules </center></font>					<br>					<center>						<table name="AvailableTable" id="AvailableTable" border="1">							<tr>								<td>Course</td>								<td>Remove/Add</td>								<td>Filter Sections By</td>							</tr>						</table>					</center>        </div>      </div>    </div>	</div>      </form><script type="text/javascript">    tabview_initialize('TabView');</script></body></html>